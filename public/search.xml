<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Python入门(二):PyCharm开发环境]]></title>
    <url>%2F2017%2F12%2F19%2Fhellopython2%2F</url>
    <content type="text"><![CDATA[开发Python的首选?那自然是PyCharm.来自于JetBrain家族的强大基因.😝 到这里去下载:https://www.jetbrains.com/pycharm/download/下载免费的社区版即可. 新建Django项目我们新建一个项目,项目名stuproject,app名称stu,其他默认如下图参数配置.点击create创建. 在这个默认的情况下,创建项目最后会提示错误如下:创建的项目结构也是有问题的. 产生这个错误的根本原因是:Mac内置的Python版本有点低,和项目自动获取到的最新的Django(目前是2.0)存在兼容问题.所以解决的办法有两种: 1.使用旧版本的Django,如1.9版本 进入终端,转到项目下bin目录,输入命令:1234567(venv) promote:bin kun$ pip install django==1.9Collecting django==1.9 Using cached Django-1.9-py2.py3-none-any.whlInstalling collected packages: djangoSuccessfully installed django-1.9``` - 执行 django-admin.py startproject stuproject (venv) promote:bin kun$ django-admin.py startproject1234- 在当前目录内会生成startproject文件夹,进入文件夹可以看到目录结构![结构](http://p066esquq.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-19%2015.02.42.png) * 执行 python managy.py runserver,看到服务器已经启动.在浏览器里输入网址访问http://127.0.0.1:8000/即可看到示例页面. (venv) promote:stuproject kun$ python manage.py runserverPerforming system checks…Django version 1.9, using settings ‘stuproject.settings’Starting development server at http://127.0.0.1:8000/Quit the server with CONTROL-C.123![itworks](http://p066esquq.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-19%2015.12.55.png)* 创建应用stu,终端下输入命令 python manage.py startapp stu12345678910得到一个名为stu的项目应用.![stuapp](http://p066esquq.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-19%2015.17.11.png)### 2.在Mac下安装一个新的Python版本在这一节,我们来安装一个新的Python版本,我们需要在终端下输入一些命令来安装一些工具来进行安装.- 安装HomeBrew[前提是要有xcode环境] /usr/bin/ruby -e “$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)”1- 检查安装成功与否 brew doctor1- 安装Python3 brew install python31- 检查python版本,安装的为Python3.6.3版本. kun$ python3Python 3.6.3 (default, Dec 17 2017, 22:42:13)[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)] on darwinType “help”, “copyright”, “credits” or “license” for more information. ``` 打开PyCharm,新建Django项目,这次配置如下图,画红框处表示选择Python3.注意:python3的目录是/usr/local/bin,而默认的python的目录为/usr/bin/ 项目建好,目录结构如图 点击运行,可以在浏览器里访问http://127.0.0.1:8000查看运行结果 如果运行按钮点不了,说明需要加如下运行配置. 或者 至此,一个Django框架的Python项目已经建立起来.]]></content>
      <tags>
        <tag>Python</tag>
        <tag>PyCharm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python入门(一):环境配置]]></title>
    <url>%2F2017%2F12%2F19%2Fhellopython%2F</url>
    <content type="text"><![CDATA[Python入门(一):环境配置 Python最近很火,连文科生都咨询我能不能学Python了,亚历山大呀!看来也得与时俱进.于是找了本教材,利用周末的时间把书过了一遍,再利用两天的时间用Python的框架Django做了个小小的学生信息管理系统demo.在这里,把学习经历和开发过程做个总结. 先从环境配置开始把,我用的是Mac,所以讲的是Mac下开发环境的搭建. 安装Python其实Mac已经自带了Python,我们可以打开终端,输入python即可进入Python模式.12345promote:~ kun$ pythonPython 2.7.10 (default, Jul 15 2017, 17:16:57) [GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.31)] on darwinType "help", "copyright", "credits" or "license" for more information.&gt;&gt;&gt; 可以看到,Mac下的Python的版本是2.7.[后面的学习中,我会安装其他的更新的版本,如Python3] 可以输入exit()退出Python模式. Python脚本进入Python模式后,我们可以输入一下脚本进行测试.我们从最经典的”HelloWorld”开始.输入如下命令:12&gt;&gt;&gt; print "Hello World!"Hello World! 我们可以到运行结果. 我们也可以新建个文本文档,命名为hello.py,将上面的脚本输入并保存,然后执行命令:12promote:~ kun$ python hello.py Hello World! 也可以得到相同的结果. 开发环境:VsCodeVsCode全名叫Visual Studio Code,是微软推出的一个代码编辑工具,正在变得越来越好用.所以在VsCode下写Python也很方便,配置好环境后,还可以调试代码. VsCode安装Python扩展切换到扩展页,输入python,搜索,安装排名第一的由微软推出的Python扩展即可,关闭VsCode再重新打开,以使配置生效. 创建一个脚本文件并测试运行 新建工作区目录 用VsCode打开这个目录 新建一个test.py文件,输入下面脚本并保存 1print &quot;Hello World!&quot; 左边切换到调试页,可以看到绿色运行按钮旁边显示没有配置,我们点击它,选择添加配置,VsCode会给自动生一个launch.json文件,里面已经包含了python运行所需要的配置信息.详情如下 12345678910111213141516171819202122232425262728293031323334353637383940414243444546&#123; // 使用 IntelliSense 了解相关属性。 // 悬停以查看现有属性的描述。 // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387 &quot;version&quot;: &quot;0.2.0&quot;, &quot;configurations&quot;: [ &#123; &quot;name&quot;: &quot;Python&quot;, &quot;type&quot;: &quot;python&quot;, &quot;request&quot;: &quot;launch&quot;, &quot;stopOnEntry&quot;: true, &quot;pythonPath&quot;: &quot;$&#123;config:python.pythonPath&#125;&quot;, &quot;program&quot;: &quot;$&#123;file&#125;&quot;, &quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;&quot;, &quot;env&quot;: &#123;&#125;, &quot;envFile&quot;: &quot;$&#123;workspaceFolder&#125;/.env&quot;, &quot;debugOptions&quot;: [ &quot;RedirectOutput&quot; ] &#125;, &#123; &quot;name&quot;: &quot;Python: Attach&quot;, &quot;type&quot;: &quot;python&quot;, &quot;request&quot;: &quot;attach&quot;, &quot;localRoot&quot;: &quot;$&#123;workspaceFolder&#125;&quot;, &quot;remoteRoot&quot;: &quot;$&#123;workspaceFolder&#125;&quot;, &quot;port&quot;: 3000, &quot;secret&quot;: &quot;my_secret&quot;, &quot;host&quot;: &quot;localhost&quot; &#125;, &#123; &quot;name&quot;: &quot;Python: Terminal (integrated)&quot;, &quot;type&quot;: &quot;python&quot;, &quot;request&quot;: &quot;launch&quot;, &quot;stopOnEntry&quot;: true, &quot;pythonPath&quot;: &quot;$&#123;config:python.pythonPath&#125;&quot;, &quot;program&quot;: &quot;$&#123;file&#125;&quot;, &quot;cwd&quot;: &quot;&quot;, &quot;console&quot;: &quot;integratedTerminal&quot;, &quot;env&quot;: &#123;&#125;, &quot;envFile&quot;: &quot;$&#123;workspaceFolder&#125;/.env&quot;, &quot;debugOptions&quot;: [] &#125;, ......&#125; 点击保存.这时候,可以点击运行按钮来测试,默认是以Python配置运行的.在调试控制台可以看到运行的结果. 如何测试有输入要求的脚本?比如如下脚本,我们需要输入三个数进行测试.1234567891011121314151617import matha=input("input a:")b=input("input b:")c=input("input c:")if(a==0): print "one root:",-c/float(b)else: disc=b*b-4*a*c if(math.fabs(disc)&lt;=1e-6): print "two equal roots:",-b/(2.0*a) else: if(disc&gt;1e-6): x1=(-b+math.sqrt(disc))/(2.0*a) x2=(-b-math.sqrt(disc))/(2.0*a) print "two roots:%f,%f" % (x1,x2) else: print "no roots" 切换到调试页,点击调试按钮后的Python,弹出配置下拉框,选择Python: Terminal (integrated),表示用集成内置的终端窗口进行测试. 点击调试按钮进行调试,代码会运行并默认停在第一行,并且弹出debug工具栏,按照提示进行代码调试即可,也可以设置断点等. 在VsCode内置的终端窗口可以输入值进行测试. 我们也可以修改launch.json中的1&quot;stopOnEntry&quot;: true, 将true修改为false,即调试代码时不会停在首行代码了. 开发环境:PyCharm这部分放在下一个文中讲.]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一张图快速入门Python?]]></title>
    <url>%2F2017%2F12%2F18%2Fone-python-img%2F</url>
    <content type="text"><![CDATA[英文的看不懂??下面有中文的 确实能够快速的了解Python的基本语法,还是非常有用的.]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git使用说明详情图解]]></title>
    <url>%2F2017%2F12%2F18%2Fgithelp%2F</url>
    <content type="text"><![CDATA[Git命令详解]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo添加gitment评论]]></title>
    <url>%2F2017%2F12%2F04%2Fhexo-gitment%2F</url>
    <content type="text"><![CDATA[参考了网上一些的教程，配置了gitment，记录一下。 注册 OAuth Application到这里注册一个新的OAuth Application。Authorization callback URL 回调网址填我自己的网址：http://wxmng.com。成功之后会得到一个 client ID 和一个 client secret。 修改next主题下_config.yml以下是我的成功的配置：1234567891011121314151617181920# Gitment# Introduction: https://imsun.net/posts/gitment-introduction/# You can get your Github ID from https://api.github.com/users/&lt;Github username&gt;gitment: enable: true mint: true # RECOMMEND, A mint on Gitment, to support count, language and proxy_gateway count: true # Show comments count in post meta area lazy: false # Comments lazy loading with a button cleanly: false # Hide &apos;Powered by ...&apos; on footer, and more language: # Force language, or auto switch by theme github_user: myname #这里替换自己的名字 # 这里有点奇怪，上面备注说的Github ID查询出来是一串数字id值，但是用了就不管用，换名字反而成功了。 # MUST HAVE, Your Github ID github_repo: myname.github.io #这里替换自己的名字 # MUST HAVE, The repo you use to store Gitment comments client_id: 1234567890 #这里填入申请到的client_id client_secret: 123abc123abc #这里也是填入申请到的client_secret # EITHER this or proxy_gateway, Github access secret token for the Gitment proxy_gateway: # Address of api proxy, See: https://github.com/aimingoo/intersect redirect_protocol: # Protocol of redirect_uri with force_redirect_protocol when mint enabled 对了，这就可以了。]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>gitment</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle导入时IMP-00019 IMP-00003 ORA-00001错误]]></title>
    <url>%2F2017%2F12%2F04%2Fimporacleerror%2F</url>
    <content type="text"><![CDATA[今天在使用导入Oracle数据的时候，出现了IMP-00019 IMP-00003 ORA-00001错误。后来经过查询网络，了解了问题所在。因为表之间有关联，所有需要先删除原有的表和数据。所有删除已经存在的表，再用imp导入，就顺利导入了。 说明之前只要建立表空间和用户就可以了，建表的sql可以不去跑，反正建好后也要删。备份恢复的事不是天天干，时间长就忘了。。。]]></content>
      <tags>
        <tag>Oracle</tag>
        <tag>错误</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何去备份hexo博客]]></title>
    <url>%2F2017%2F11%2F30%2Fhowtobackupblog%2F</url>
    <content type="text"><![CDATA[备份博客搭建好后，在git里面的只有静态文件，没有.md源文件。所以不备份的话，以后换电脑或者换个环境是个问题。通用的方法是使用git分支来备份源文件。以下是步骤： 1.在git上创建一个分支取名hexo，这个取名可以随意的。 2.设置hexo为默认分支。 3.在本地新建个文件夹，将hexo仓库clone至本地，将之前源文件夹中的内容复制到此目录，即username.github.io，public目录可以不用复制，因为它是生成的静态文件; 4.如果之前的目录内，如主题等，里面有.git，要将其删除掉，否则无法push。 5.在username.github.io目录下，执行 12npm installnpm install hexo-deployer-git 6.执行提交源文件。 123git add .git commit -m &quot;文件提交&quot;git push origin hexo 7.生成静态文件部署到git上。 1hexo g -d 发布、修改以后在本地username.github.io内对博客内容进行修改后，做以下两步即可： 1.备份源文件 123git add .git commit -m &quot;文件提交、修改&quot;git push //如果不放心，可以指定git push origin hexo 2.生成静态网页并部署 1hexo g -d 以后重复这两步即可。 从备份恢复 1.目标电脑安装git 2.安装node.js和npm 3.将仓库从git克隆之本地 4.执行命令123npm install hexo-cli -gnpm installnpm install hexo-deployer-git 附录Hexo的源文件说明：1、_config.yml站点的配置文件，需要拷贝；2、themes/主题文件夹，需要拷贝；3、source博客文章的.md文件，需要拷贝；4、scaffolds/文章的模板，需要拷贝；5、package.json安装包的名称，需要拷贝；6、.gitignore限定在push时哪些文件可以忽略，需要拷贝；7、.git/主题和站点都有，表示这是一个git项目，不需要拷贝；8、node_modules/是安装包的目录，在执行npm install的时候会重新生成，不需要拷贝；9、public是hexo g生成的静态网页，不需要拷贝；10、.deploy_git同上，hexo g也会生成，不需要拷贝；11、db.json文件，不需要拷贝。 hexo命令补充说明1234567891011121314hexo new &quot;postName&quot; #新建文章hexo new page &quot;pageName&quot; #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）hexo deploy #将.deploy目录部署到GitHubhexo help # 查看帮助hexo version #查看Hexo的版本hexo deploy -g #生成加部署hexo server -g #生成加预览命令的简写hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy 参考怎么去备份你的hexo博客 搭建Hexo博客中碰到的坑]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>备份</tag>
        <tag>hexo命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[启动Mac终端提示-bash .profile No such file or directory错误]]></title>
    <url>%2F2017%2F11%2F29%2FprofileMissingInMac%2F</url>
    <content type="text"><![CDATA[1.进入用户目录1cd ~ 2.创建.profile1touch .profile 3.重启终端]]></content>
      <tags>
        <tag>Mac</tag>
        <tag>终端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MacOs系统下使用VSCode对Cpp进行debug]]></title>
    <url>%2F2017%2F11%2F29%2FUsingVsCodeDebugCppInMacOs%2F</url>
    <content type="text"><![CDATA[1.下载安装VSCode2.安装cpptools1cpptools 3.安装clang++1clang++ 4.Comd+Q,退出VSCode，重新打开VSCode。5.生成c_cpp_properties.json按fn+F1调出命令行模式，选择[C/Cpp: Edit Configurations]，会自动生成c_cpp_properties.json，在mac节点中，会自动选择xcode自带的相关include和lib等路径【所以，事先要安装好xcode】。 6.生成一个tasks.json调出命令行，选择[Tasks: Configure Task]，生成一个tasks.json。内容参考如下：123456789&#123; // See https://go.microsoft.com/fwlink/?LinkId=733558 // for the documentation about the tasks.json format "version": "0.1.0", "command": "clang++", //使用clang++编译Cpp文件，如果你使用C开发，改成clang "isShellCommand": true, "args": ["test.cpp", "-g"],//如果使用的是C，则改成test.c或者相对应的c入口文件。如果需要支持C++11，添加"-std=c++11" "showOutput": "always"&#125; 7.生成launch.json进入命令行，选择[Debug: Open launch.json]，内容参考如下：12345678910111213141516171819&#123; "version": "0.2.0", "configurations": [ &#123; "name": "C++ Launch (GDB)", "type": "cppdbg", "request": "launch", "targetArchitecture": "x86_64", "program": "$&#123;workspaceRoot&#125;/a.out", "args": [], "stopAtEntry": false, "cwd": "$&#123;workspaceRoot&#125;", "environment": [], "externalConsole": true, "MIMode": "lldb", "preLaunchTask": "clang++" //如果使用的是C，改为clang &#125; ] &#125; 8.测试，编写一个test.cpp1234567#include &lt;iostream&gt;using namespace std;int main(void)&#123; cout&lt;&lt;"Hello World!"&lt;&lt;endl; return 0;&#125; 使用shift+command+b，编译生成a.out。Fn+F5进行debug调试。可以设断点，单步调试。 最后，调试时，VSCode会挡住终端窗口，害的我以为在VsCode里面的输出里面看结果。]]></content>
      <tags>
        <tag>Mac</tag>
        <tag>VSCode</tag>
        <tag>C++</tag>
        <tag>debug</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于hexo的一些]]></title>
    <url>%2F2017%2F11%2F29%2F%E5%85%B3%E4%BA%8Ehexo%E7%9A%84%E4%B8%80%E4%BA%9B%2F</url>
    <content type="text"><![CDATA[Hexo，真的很不错。 用hexo和github很早就建了一个个人博客，但是一直没有怎么用。 这两天捡起来，又做了些配置和调整。遇到一些问题，一个个解决了。 1.发布后，遇到404问题。原因是将整个项目提交至git了，而不是public目录。 2.学着发了个图片试试。发图片可以选择本地方式和外链方式。两个方式都试了，比较了一下，还是选择把图片存在了七牛云上这种外链方式。 3.主题从hack更换为NexT 4.将标签和分类启用。 5.上传了一个avatar头像。 还有很多地方需要花点时间了解。记录于此。]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo用的很不熟]]></title>
    <url>%2F2017%2F11%2F28%2Fhexo%E7%94%A8%E7%9A%84%E5%BE%88%E4%B8%8D%E7%86%9F%2F</url>
    <content type="text"><![CDATA[hexo用的很不熟。 今天抽空复习了一下md文件的写法。 有时间再去hexo中文官网去看看文档，学学如何使用hexo。]]></content>
  </entry>
  <entry>
    <title><![CDATA[错误]]></title>
    <url>%2F2017%2F11%2F28%2F%E9%94%99%E8%AF%AF%2F</url>
    <content type="text"><![CDATA[Github Pages 404 错误有一阵子没用hexo了，今天重新用发布的时候出现了404错误。提示找不到index.html文件。 一阵小紧张。 忘了太久了。 看了网上一些问题，提示虽然也是404，但是和我的情况不一样。我的是之前一直能访问的，反而发布了一个新的post后，就提示404了。 排查了好一会儿，发现了问题了。 因为刚才发布的时候有点问题，所以我用git init命令在本地的username.github.io目录下运行了一下，但是其实应该在其子目录public下运行才对。所有deploy的时候，它把父目录全部提交了，所以找不到index.html文件了。验证的方法很简单，就是在网址后面加上/public试试看。找到问题就简单了，删除错误的.git目录和.deloy_git目录。在public目录下再重新git init下。再次deploy，成功了。网站正常打开。]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>404</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac远程Win失败]]></title>
    <url>%2F2016%2F09%2F18%2FMac%E8%BF%9C%E7%A8%8BWin10%E5%A4%B1%E8%B4%A5%2F</url>
    <content type="text"><![CDATA[Mac远程Win10失败，提示：远程桌面连接无法验证您希望连接的计算机的身份 Solution 1.Enable RDP security layer in Group Policy on the machine. 2.Verify that the firewall allows remote desktop connections with RDP (Port 3389) 3.Click Start&gt;Run，Type gpedit.msc and click “OK”, The Group Policy Editor will open. 4,In the left hand side bar, expand Computer Configuration&gt;Administrative Templates&gt;Windows Components&gt;Remote Desktop Services&gt;Remote Desktop Session Host. 5.Select “Security”,Change “Require use of specific security layer for remote desktop (RDP) connection” to Enabled” and select “RDP” in the Options pane. 6.Change “Require user authentication for remote connections by using Network Level,Authentication” to “Disabled.” 7.Close Group Policy Editor and reboot the machine for changes to take effect.]]></content>
      <tags>
        <tag>Mac</tag>
        <tag>远程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test!]]></title>
    <url>%2F2016%2F09%2F08%2Ftest%2F</url>
    <content type="text"><![CDATA[#This is my first Post test.]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2016%2F09%2F08%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
